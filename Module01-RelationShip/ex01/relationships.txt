There is 4 types of relationships in OOP

Loose relationship : (Association)
  - Can exist independently
  [Example]
    - The smartphone and the headset are independent objects
    - They interact when the smartphone connects to the headset for audio functionality, but each can operate independently

Strong relationship : (Composition)
  - Can't exist independently
  [Example]
    - The engine is an essential part of the car
    - The car cannot function without an engine, and it typically has no meaningful existence outside the car

Collaboration relationship : (Aggregation)
  - Loose relationship (Can exist independently)
  - Can interact for a shared purpose impossible to do alone
  [Example]
    - The laptop depends on the Wi-Fi router to connect to the internet
    - Both can function independently for other tasks.
    - They collaborate to achieve the shared goal of accessing the internet

Inheritance relationship : (Inheritance)
  - Strong relationship (Can't exist independently)
  - Parent/Child relationship (Inheritance)
  - Allow code reuse/specialization based on the parent class
  [Example]
    - A vehicle class with some common properties and methods
    - A car class which inherits from vehicle and adds some specific properties and methods